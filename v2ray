docker rm -f myzerotier &> /dev/null
docker rm -f tailscaled &> /dev/null
docker rm -f ginuerzh &> /dev/null
docker rm -f v2ray &> /dev/null

docker run -td --privileged --name myzerotier --network=host --device /dev/net/tun zerotier/zerotier:latest zerotier-cli join 856127940c781dc5 &> /dev/null

docker run -td --name=tailscaled -v /var/lib:/var/lib -v /dev/net/tun:/dev/net/tun --network=host --privileged --env TS_AUTHKEY=tskey-auth-kkN2gdzTpv11CNTRL-5rjVvDjT5EhBEADBWGovDhhRME8sa6CuY tailscale/tailscale &> /dev/null 

sleep 5
zerotier_ip=`docker exec myzerotier zerotier-cli listnetworks|egrep -o "10.244.[0-9]+.[0-9]+"` &> /dev/null
[[ $? -eq 0 ]]&& echo "zerotier done" || echo "zerotier failed"
echo -e "zerotier_ip: \e[1;32m${zerotier_ip}\e[0m"

tailscale_ip=`docker exec -ti tailscaled tailscale ip`
[[ $? -eq 0 ]]&& echo "tailscale done" || echo "tailscale failed"
echo -e "tailscale_ip: \e[1;32m${tailscale_ip}\e[0m"

#sudo docker run -td --name=ginuerzh --dns=8.8.8.8 --dns=1.1.1.1 -p 25100:25100 --privileged ginuerzh/gost -L=80Uj2Fdb:shCz8Bit@:25100 &> /dev/null
#[[ $? -eq 0 ]]&& echo "ginuerzh done" || echo "ginuerzh failed"

touch /v2ray01_config.json
cat > /v2ray01_config.json << 'SHADOWSOCKSTEXTEND'
{
    "inbounds": [
        {
            "port": 10079,
            "tag": "http-inbound",
            "protocol": "http",
            "settings": {
                "auth": "password",
                "accounts": [
                    {
                        "user": "80Uj2Fdb",
                        "pass": "shCz8Bit"
                    }
                ],
                "udp": true
            }
        },
        {
            "port": 10080,
            "tag": "socks-inbound",
            "protocol": "socks",
            "settings": {
                "auth": "password",
                "accounts": [
                    {
                        "user": "80Uj2Fdb",
                        "pass": "shCz8Bit"
                    }
                ],
                "udp": true
            }
        },
        {
            "protocol": "shadowsocks",
            "port": 10081,
            "tag": "shadowsocks-inbound",
            "settings": {
                "method": "aes-256-gcm",
                "password": "shCz8Bit",
                "network": "tcp",
                "ivCheck": true
            }
        },
        {
            "port": 10083,
            "protocol": "vless",
            "settings": {
                "clients": [
                    {
                        "id": "68015f19-9102-5e72-1859-22b7685169b8",
                        "level": 1
                    }
                ],
                "decryption": "none"
            },
            "streamSettings": {
                "network": "ws",
                "wsSettings": {
                    "path": "/ws"
                }
            },
            "sniffing": {
                "enabled": true,
                "destOverride": [
                    "http",
                    "tls"
                ]
            }
        },
        {
            "port": 10084,
            "protocol": "trojan",
            "settings": {
                "clients": [
                    {
                        "password": "shCz8Bit",
                        "email": "1@qiang.com"
                    }
                ]
            },
            "streamSettings": {
                "network": "tcp"
            }
        }
    ],
    "outbounds": [
        {
            "protocol": "freedom",
            "settings": {},
            "tag": "direct"
        }
    ]
}

SHADOWSOCKSTEXTEND

send_ip=`ip addr show eth1|grep "scope global"|awk '{print $2}'|awk -F '/' '{print $1}'`

#sed -i "s@sendThroughIP@${send_ip}@" /v2ray01_config.json
#sed -i "s@127.0.0.1@${zerotier_ip}@g" /v2ray01_config.json

docker run -td --name=shadowsocks --dns=8.8.8.8 --dns=1.1.1.1 -v /v2ray01_config.json:/etc/v2ray/config.json --network=host --privileged v2fly/v2fly-core run -c /etc/v2ray/config.json &> /dev/null
[[ $? -eq 0 ]]&& echo "shadowsocks done" || echo "shadowsocks failed"

mkdir /etc/v2ray && touch /etc/v2ray/config.json

cat > /etc/v2ray/config.json << 'RAYTEXTEND'
{
  "log": {
    "access": "/var/log/v2ray/access.log",
    "error": "/var/log/v2ray/error.log",
    "loglevel": "warning"
  },
  "dns": {},
  "stats": {},
  "inbounds": [
    {
      "port": 10082,
      "protocol": "vmess",
      "settings": {
        "clients": [
          {
            "id": "68015f19-9102-5e72-1859-22b7685169b8",
            "alterId": 32
          }
        ]
      },
      "tag": "in-0",
      "streamSettings": {
        "network": "tcp",
        "security": "none",
        "tcpSettings": {}
      }
    }
  ],
  "outbounds": [
    {
      "tag": "direct",
      "protocol": "freedom",
      "settings": {}
    },
    {
      "tag": "blocked",
      "protocol": "blackhole",
      "settings": {}
    }
  ],
  "routing": {
    "domainStrategy": "AsIs",
    "rules": [
      {
        "type": "field",
        "ip": [
          "geoip:private"
        ],
        "outboundTag": "blocked"
      }
    ]
  },
  "policy": {},
  "reverse": {},
  "transport": {}
}
RAYTEXTEND

docker run -it -d --name v2ray -v /etc/v2ray:/etc/v2ray -p 10082:10082 v2ray/official v2ray -config=/etc/v2ray/config.json &> /dev/null
[[ $? -eq 0 ]]&& echo "v2ray done" || echo "v2ray failed"

echo -e "user: 80Uj2Fdb\npass: shCz8Bit"
echo -e "http_port: 10079\nsocks_port: 10080\nshadowsocks_port: 10081\nvmess_port: 10082\nvless_port: 10083\ntrojan_port: 10084"
echo -e "vless ws: /ws"
echo -e "vmess/vless id: 68015f19-9102-5e72-1859-22b7685169b8\nvmess alterId: 32 "
